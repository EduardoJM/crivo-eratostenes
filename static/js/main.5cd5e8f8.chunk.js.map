{"version":3,"sources":["components/Modal/index.tsx","components/MessageHub/index.tsx","components/Crivo/index.tsx","App/index.tsx","index.tsx"],"names":["Modal","props","opened","onCloseRequested","title","children","useTransition","from","opacity","enter","leave","transitions","styles","item","div","className","style","undefined","onClick","size","id","MessageHub","config","tension","friction","precision","timeout","refMap","useMemo","WeakMap","cancelMap","useState","items","setItems","height","life","keys","key","next","cancel","a","set","get","offsetHeight","onRest","result","ctrl","state","filter","i","index","phase","duration","useEffect","msg","ref","right","e","stopPropagation","has","Crivo","max","columns","createRawTable","rows","k","row","j","push","col","value","crived","addRefFunction","useRef","nextCriveNumber","setNextCriveNumber","stoped","setStoped","dataTable","setDataTable","testCrivo","criveNumber","length","cell","cellSpacing","map","newTable","message","join","flatDataTable","forEach","filtered","current","add","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd5e8f8.chunk.js","sourcesContent":["import React from 'react';\nimport { animated, useTransition } from 'react-spring';\nimport { MdClose } from 'react-icons/md';\n\nimport './styles.css';\n\nexport interface ModalProps {\n    opened: boolean;\n    onCloseRequested(): void;\n    title?: string;\n}\n\nconst Modal: React.FC<ModalProps> = (props) => {\n    const {\n        opened,\n        onCloseRequested,\n        title = null,\n        children,\n    } = props;\n\n    const transitions = useTransition(opened, {\n        from: { opacity: 0, },\n        enter: { opacity: 1, },\n        leave: { opacity: 0, },\n    });\n\n    return transitions((styles, item) => item ? (\n        <animated.div className=\"modal-overlay\" style={styles}>\n            <div className=\"modal-overlay-top\">\n                <div className=\"modal-content\">\n                    {title !== null && title !== undefined && (\n                        <h3 className=\"title\">{title}</h3>\n                    )}\n                    {children}\n\n                    <span className=\"close-button\" onClick={onCloseRequested}>\n                        <MdClose size={24} />\n                    </span>\n                </div>\n            </div>\n        </animated.div>\n    ) : (<></>));\n};\n\nexport default Modal;\n","import React, { useMemo, useState, useEffect, MouseEvent } from 'react';\nimport { animated } from 'react-spring';\nimport { useTransition } from 'react-spring/web';\nimport { MdClose } from 'react-icons/md';\n\nimport './styles.css';\n\nlet id = 0;\n\nexport type AddFunction = (msg: string) => void;\n\nexport interface MessageHubProps {\n    config?: {\n        tension: number\n        friction: number\n        precision: number\n    };\n    timeout?: number;\n    children: (add: AddFunction) => void;\n}\n\ninterface Item {\n    key: number;\n    msg: string;\n}\n\nconst MessageHub: React.FC<MessageHubProps> = (props) => {\n    const {\n        config = { tension: 125, friction: 20, precision: 0.1 },\n        timeout = 3000,\n        children\n    } = props;\n    const refMap = useMemo(() => new WeakMap(), [])\n    const cancelMap = useMemo(() => new WeakMap(), [])\n    const [items, setItems] = useState<Item[]>([])\n\n    const transitions = useTransition(items, {\n        from: { opacity: 0, height: 0, life: '100%' },\n        keys: item => item.key,\n        enter: item => async (next, cancel) => {\n          cancelMap.set(item, cancel)\n          await next({ opacity: 1, height: refMap.get(item).offsetHeight })\n          await next({ life: '0%' })\n        },\n        leave: [{ opacity: 0 }, { height: 0 }],\n        onRest: (result, ctrl, item) => {\n          setItems(state =>\n            state.filter(i => {\n              return i.key !== item.key\n            })\n          )\n        },\n        config: (item, index, phase) => key => (phase === 'enter' && key === 'life' ? { duration: timeout } : config),\n    });\n\n    useEffect(() => {\n        children((msg: string) => {\n          setItems(state => [...state, { key: id++, msg }])\n        });\n    }, [children]);\n\n    return (\n        <div className=\"messageHub-container\">\n            {transitions(({ life, ...style }, item) => (\n                <animated.div className=\"messageHub-message\" style={style}>\n                    <div\n                        className=\"messageHub-content\"\n                        ref={(ref: HTMLDivElement) => ref && refMap.set(item, ref)}\n                    >\n                        <animated.div className=\"messageHub-life\" style={{ right: life }} />\n                        <p>{item.msg}</p>\n                        <button\n                            className=\"messageHub-button\"\n                            onClick={(e: MouseEvent) => {\n                                e.stopPropagation()\n                                if (cancelMap.has(item)) cancelMap.get(item)()\n                            }}\n                        >\n                            <MdClose size={18} />\n                        </button>\n                    </div>\n                </animated.div>\n            ))}\n        </div>\n    )\n}\n\nexport default MessageHub;\n","import React, { useState, useRef } from 'react';\nimport {MdCheck} from 'react-icons/md';\n\nimport Modal from '../Modal';\nimport MessageHub, { AddFunction } from '../MessageHub';\n\nimport './styles.css';\n\nexport interface CrivoProps {\n    max?: number;\n    columns?: number;\n}\n\ninterface CrivoTableCell {\n    row: number;\n    col: number;\n    value: number;\n    crived: boolean;\n}\n\nconst Crivo: React.FC<CrivoProps> = (props) => {\n    const {\n        max = 100,\n        columns = 10,\n    } = props;\n\n    function createRawTable() {\n        let rows: CrivoTableCell[][] = [];\n        let i = 1;\n        let k = 1;\n        let row: CrivoTableCell[] = [];\n        while (i <= max) {\n            for (let j = 1; j <= columns; j += 1) {\n                row.push({\n                    col: j,\n                    row: k,\n                    value: i,\n                    crived: false,\n                })\n                i += 1;\n            }\n            rows.push(row);\n            row = []\n            k += 1;\n        }\n        return rows;\n    }\n\n    const addRefFunction = useRef<null | AddFunction>(null)\n\n    const [nextCriveNumber, setNextCriveNumber] = useState(2);\n    const [stoped, setStoped] = useState(false);\n    const [dataTable, setDataTable] = useState<CrivoTableCell[][]>(() => createRawTable());\n\n    function testCrivo(criveNumber: number) {\n        let crived = 0;\n        for (let i = 0; i < dataTable.length; i += 1) {\n            for (let j = 0; j < dataTable[i].length; j += 1) {\n                const cell = dataTable[i][j];\n                if ((cell.value !== criveNumber) && (cell.value % criveNumber === 0)) {\n                    if (!cell.crived) {\n                        crived += 1;\n                    }\n                }\n            }\n        }\n        return (crived > 0);\n    }\n\n    function handleNextClick() {\n        let criveNumber = nextCriveNumber;\n        while (!testCrivo(criveNumber)) {\n            criveNumber += 1;\n            if (criveNumber >= max) {\n                break;\n            }\n        }\n        if (!testCrivo(criveNumber)) {\n            setStoped(true);\n            return;\n        }\n        const newTable: CrivoTableCell[][] = [];\n        let crived = [];\n        for (let i = 0; i < dataTable.length; i += 1) {\n            let row: CrivoTableCell[] = [];\n            for (let j = 0; j < dataTable[i].length; j += 1) {\n                const cell = dataTable[i][j];\n                if ((cell.value !== criveNumber) && (cell.value % criveNumber === 0)) {\n                    if (!cell.crived) {\n                        crived.push(cell.value);\n                    }\n                    row.push({\n                        ...cell,\n                        crived: true,\n                    });\n                } else {\n                    row.push(cell);\n                }\n            }\n            newTable.push(row);\n            row = [];\n        }\n        let message = `Remover todos os multiplos de ${criveNumber}, exceto ele mesmo: {${crived.join(', ')}}.`;\n        const flatDataTable: CrivoTableCell[] = [];\n        newTable.forEach((row) => flatDataTable.push(...row));\n        const filtered = flatDataTable.filter((item) => !item.crived && item.value > criveNumber);\n        if (filtered.length === 0) {\n            message = `${message} Não há mais números compostos na tabela.`;\n        } else {\n            message = `${message} O número ${filtered[0].value} é o próximo número primo.`;\n            setNextCriveNumber(filtered[0].value);\n            setDataTable(newTable);\n        }\n        if (addRefFunction.current) {\n            addRefFunction.current(message);\n        }\n    }\n\n    function handleModalClose() {\n        setStoped(false);\n    }\n\n    function handleClearClick() {\n        setDataTable(createRawTable());\n        setNextCriveNumber(2);\n    }\n\n    return (\n        <>\n            <table className=\"crivo\" cellSpacing={10}>\n                <tbody>\n                    {dataTable.map((row, index) => (\n                        <tr key={index}>\n                            {row.map((col, index) => (\n                                <td\n                                    key={index}\n                                    className={`${col.value === 1 ? 'number-one' : col.crived ? 'crived' : ''}`}\n                                >\n                                    {col.value}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n            <div className=\"buttons-row\">\n                <button onClick={handleClearClick}>Limpar</button>\n                <button onClick={handleNextClick}>Avançar</button>\n            </div>\n\n            <Modal\n                opened={stoped}\n                onCloseRequested={handleModalClose}\n                title=\"Ops! Chegamos no nosso limite!\"\n            >\n                <p className=\"modal-center-text\">\n                    <MdCheck size={120} />\n                    <br/>\n                    Não há mais checagens, todos os números não apagados da tabela são números primos.\n                </p>\n            </Modal>\n\n            <MessageHub\n                children={(add: AddFunction) => {\n                    addRefFunction.current = add;\n                }}\n            />\n        </>\n    );\n};\n\nexport default Crivo;\n","import React from 'react';\n\nimport Crivo from '../components/Crivo';\n\nimport './styles.css';\n\nfunction App() {\n    return (\n        <div id=\"app\">\n            <Crivo max={150} columns={15} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}